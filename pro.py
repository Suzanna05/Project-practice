import telebot
from telebot import types

bot = telebot.TeleBot("7385196322:AAFa559F9t9zYJ5yrZu4LvC-k74iZx_BEuY")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
tasks = {}

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        "–ú–æ–∏ –∑–∞–¥–∞—á–∏",
        "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ",
        "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "–ü–æ–º–æ—â—å"
    ]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_name = message.from_user.first_name
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/data - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É
/done - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
/results - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
/help - —Å–ø—Ä–∞–≤–∫–∞

–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:
–î–∞—Ç–∞ - –î–î.–ú–ú.–ì–ì–ì–ì
–í—Ä–µ–º—è - –ß–ß:–ú–ú-–ß–ß:–ú–ú
"""
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_command(message):
    start(message)

@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
def show_tasks_command(message):
    show_data(message)

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
def mark_done_command(message):
    done(message)

@bot.message_handler(func=lambda message: message.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats_command(message):
    results(message)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_command(message):
    send_welcome(message)

@bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user_name}, –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Ç–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n–í–≤–µ–¥–∏ –¥–∞—Ç—É (–≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    user_data[message.chat.id] = {"step": "waiting_date"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_date")
def get_date(message):
    if not validate_date(message.text):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    user_data[message.chat.id] = {
        "step": "waiting_task",
        "date": message.text
    }
    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–∞–ª. –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_task")
def get_task(message):
    user_data[message.chat.id].update({
        "step": "waiting_time",
        "task": message.text
    })
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (–≤ –≤–∏–¥–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú):")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_time")
def get_time(message):
    if not validate_time(message.text):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú:")
        return
    
    date = user_data[message.chat.id]["date"]
    task = user_data[message.chat.id]["task"]
    time = message.text
    
    if date not in tasks:
        tasks[date] = []
    tasks[date].append({"task": task, "time": time, "done": False})
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É")
    
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {date}:\nüïí {time}\nüìù {task}", reply_markup=markup)
    user_data[message.chat.id] = {}

@bot.message_handler(commands=['data'])
def show_data(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    user_data[message.chat.id] = {"step": "waiting_data_date"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_data_date")
def process_data_date(message):
    date = message.text
    if date not in tasks or not tasks[date]:
        bot.send_message(message.chat.id, f"–ù–∞ {date} –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=create_main_menu())
    else:
        task_list = "\n".join([f"üïí {task['time']} - {task['task']}{' ‚úÖ' if task['done'] else ''}" for task in tasks[date]])
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
        bot.send_message(message.chat.id, f"üìÖ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ {date}:\n{task_list}", reply_markup=markup)
    user_data[message.chat.id] = {}

@bot.message_handler(commands=['done'])
def done(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    user_data[message.chat.id] = {"step": "waiting_done_date"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_done_date")
def process_done_date(message):
    date = message.text
    if date not in tasks or not tasks[date]:
        bot.send_message(message.chat.id, f"–ù–∞ {date} –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=create_main_menu())
    else:
        undone_tasks = [task for task in tasks[date] if not task["done"]]
        if not undone_tasks:
            bot.send_message(message.chat.id, f"–ù–∞ {date} –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", reply_markup=create_main_menu())
            return
            
        task_list = "\n".join([f"{i+1}. {task['time']} - {task['task']}" for i, task in enumerate(undone_tasks)])
        user_data[message.chat.id] = {
            "step": "waiting_task_number",
            "date": date,
            "undone_tasks": undone_tasks
        }
        bot.send_message(message.chat.id, f"üìÖ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {date}:\n{task_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_task_number")
def process_task_number(message):
    try:
        task_num = int(message.text) - 1
        date = user_data[message.chat.id]["date"]
        undone_tasks = user_data[message.chat.id]["undone_tasks"]
        
        if 0 <= task_num < len(undone_tasks):
            task_name = undone_tasks[task_num]["task"]
            # –ù–∞—Ö–æ–¥–∏–º —ç—Ç—É –∑–∞–¥–∞—á—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –æ—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
            for task in tasks[date]:
                if task["task"] == task_name and not task["done"]:
                    task["done"] = True
                    break
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Ç–º–µ—Ç–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É")
            
            bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ç–æ–≤–æ, \"{task_name}\" ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    finally:
        user_data[message.chat.id] = {}

@bot.message_handler(commands=['results'])
def results(message):
    done_count = sum(1 for date in tasks for task in tasks[date] if task["done"])
    bot.send_message(message.chat.id, f"üéâ –í—Å–µ–≥–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {done_count} –∑–∞–¥–∞—á. –¢—ã –º–æ–ª–æ–¥–µ—Ü!", reply_markup=create_main_menu())

def validate_date(date):
    try:
        day, month, year = map(int, date.split('.'))
        return 1 <= day <= 31 and 1 <= month <= 12 and year >= 2023
    except:
        return False

def validate_time(time):
    try:
        start, end = time.split('-')
        start_h, start_m = map(int, start.split(':'))
        end_h, end_m = map(int, end.split(':'))
        return (0 <= start_h < 24 and 0 <= start_m < 60 and 
                0 <= end_h < 24 and 0 <= end_m < 60)
    except:
        return False

@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def return_to_main_menu(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É")
def add_another_task(message):
    start(message)

bot.polling(none_stop=True)